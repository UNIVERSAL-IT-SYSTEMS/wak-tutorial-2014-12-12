model.User.age.onGet = function(){		var date = this.birthdate;	if(!date){		return null;	}		var today = new Date();	var interval = today.getTime() - date.getTime();	var nbYears = Math.floor(interval / (1000 * 60 * 60 * 24 * 365.25));	return nbYears;}model.User.age.onQuery = function(compOperator, valueToCompare){	if (valueToCompare == null)	{		if (compOperator == "==" || compOperator == "===")			result = "birthdate is null";		else			result = "birthdate is not null";	}	else	{		var today = new Date();				var lowerlimit = new Date(today.getFullYear() - valueToCompare - 1, today.getMonth(), today.getDate(), today.getHours(), today.getMinutes());		var upperlimit = new Date(today.getFullYear() - valueToCompare, today.getMonth(), today.getDate(), today.getHours(), today.getMinutes());				var result = null;		switch (compOperator)			{				case '=':				case '==':										case '!=':				case '!==':					result = "birthdate >= '"+lowerlimit.toISOString()+"'";					result += " and birthdate < '"+upperlimit.toISOString()+"'";					if (compOperator == '!=' || compOperator == '!==')						result = "not ("+result+")";					break;								case '>':					result = "birthdate < '"+lowerlimit.toISOString()+"'";					break;									case '>=':					result = "birthdate <= '"+upperlimit.toISOString()+"'";					break;									case '<':					result = "birthdate > '"+upperlimit.toISOString()+"'";					break;									case '<=':					result = "birthdate >= '"+lowerlimit.toISOString()+"'";					break;			}	}	return result;}model.User.age.onSort = function(ascending){	if (ascending)		return "birthdate desc";	else		return "birthdate asc";};